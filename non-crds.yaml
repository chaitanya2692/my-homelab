# This is an auto-generated file. DO NOT EDIT
# This is an auto-generated file. DO NOT EDIT
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: htpc
  name: htpc
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager
  namespace: htpc
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector
  namespace: htpc
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
  labels:
    app: htpc
    app.kubernetes.io/component: startupapicheck
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-startupapicheck
  namespace: htpc
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook
  namespace: htpc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-controller
  namespace: htpc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: speaker
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-speaker
  namespace: htpc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector:leaderelection
  namespace: htpc
rules:
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - cert-manager-cainjector-leader-election
  - cert-manager-cainjector-leader-election-core
  resources:
  - leases
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
  labels:
    app: htpc
    app.kubernetes.io/component: startupapicheck
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-startupapicheck:create-cert
  namespace: htpc
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook:dynamic-serving
  namespace: htpc
rules:
- apiGroups:
  - ""
  resourceNames:
  - cert-manager-webhook-ca
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager:leaderelection
  namespace: htpc
rules:
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - cert-manager-controller
  resources:
  - leases
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-controller
  namespace: htpc
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - metallb-memberlist
  resources:
  - secrets
  verbs:
  - list
- apiGroups:
  - apps
  resourceNames:
  - metallb-controller
  resources:
  - deployments
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - metallb.io
  resources:
  - ipaddresspools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - bgppeers
  verbs:
  - get
  - list
- apiGroups:
  - metallb.io
  resources:
  - bgpadvertisements
  verbs:
  - get
  - list
- apiGroups:
  - metallb.io
  resources:
  - l2advertisements
  verbs:
  - get
  - list
- apiGroups:
  - metallb.io
  resources:
  - communities
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - bfdprofiles
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-pod-lister
  namespace: htpc
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - bfdprofiles
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - bgppeers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - l2advertisements
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - bgpadvertisements
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - ipaddresspools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metallb.io
  resources:
  - communities
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
  name: cert-manager-controller-leases
  namespace: htpc
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
  name: cert-manager-cainjector-leader-election
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
    rbac.authorization.k8s.io/aggregate-to-cluster-reader: "true"
  name: cert-manager-cluster-view
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-approve:cert-manager-io
rules:
- apiGroups:
  - cert-manager.io
  resourceNames:
  - issuers.cert-manager.io/*
  - clusterissuers.cert-manager.io/*
  resources:
  - signers
  verbs:
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-certificates
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificates/status
  - certificaterequests
  - certificaterequests/status
  verbs:
  - update
  - patch
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - clusterissuers
  - issuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - certificates/finalizers
  - certificaterequests/finalizers
  verbs:
  - update
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-certificatesigningrequests
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/status
  verbs:
  - update
  - patch
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - issuers.cert-manager.io/*
  - clusterissuers.cert-manager.io/*
  resources:
  - signers
  verbs:
  - sign
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-challenges
rules:
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  - challenges/status
  verbs:
  - update
  - patch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  - clusterissuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - route.openshift.io
  resources:
  - routes/custom-host
  verbs:
  - create
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-clusterissuers
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  - clusterissuers/status
  verbs:
  - update
  - patch
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-ingress-shim
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  verbs:
  - create
  - update
  - delete
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  - clusterissuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  - httproutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/finalizers
  - httproutes/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-issuers
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  - issuers/status
  verbs:
  - update
  - patch
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-orders
rules:
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders
  - orders/status
  verbs:
  - update
  - patch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders
  - challenges
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  - issuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  verbs:
  - create
  - delete
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: cert-manager-edit
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - certificates/status
  verbs:
  - update
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  - orders
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-cluster-reader: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: cert-manager-view
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  - orders
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook:subjectaccessreviews
rules:
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb:controller
rules:
- apiGroups:
  - ""
  resources:
  - services
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - admissionregistration.k8s.io
  resourceNames:
  - metallb-webhook-configuration
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resourceNames:
  - bfdprofiles.metallb.io
  - bgpadvertisements.metallb.io
  - bgppeers.metallb.io
  - ipaddresspools.metallb.io
  - l2advertisements.metallb.io
  - communities.metallb.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb:speaker
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - nodes
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - metallb.io
  resources:
  - servicel2statuses
  - servicel2statuses/status
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik-default
rules:
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingressclasses
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - traefik.io
  resources:
  - ingressroutes
  - ingressroutetcps
  - ingressrouteudps
  - middlewares
  - middlewaretcps
  - tlsoptions
  - tlsstores
  - traefikservices
  - serverstransports
  - serverstransporttcps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector:leaderelection
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-manager-cainjector:leaderelection
subjects:
- kind: ServiceAccount
  name: cert-manager-cainjector
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
  labels:
    app: htpc
    app.kubernetes.io/component: startupapicheck
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-startupapicheck:create-cert
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-manager-startupapicheck:create-cert
subjects:
- kind: ServiceAccount
  name: cert-manager-startupapicheck
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook:dynamic-serving
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-manager-webhook:dynamic-serving
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: cert-manager-webhook
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager:leaderelection
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-manager:leaderelection
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-controller
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: metallb-controller
subjects:
- kind: ServiceAccount
  name: metallb-controller
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-pod-lister
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: metallb-pod-lister
subjects:
- kind: ServiceAccount
  name: metallb-speaker
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
  name: cert-manager-controller-leases
  namespace: htpc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-leases
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-cainjector
subjects:
- kind: ServiceAccount
  name: cert-manager-cainjector
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
  name: cert-manager-cainjector-leader-election
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-cainjector-leader-election
subjects:
- kind: ServiceAccount
  name: cert-manager-cainjector
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-approve:cert-manager-io
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-approve:cert-manager-io
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-certificates
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-certificates
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-certificatesigningrequests
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-certificatesigningrequests
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-challenges
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-challenges
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-clusterissuers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-clusterissuers
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-ingress-shim
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-ingress-shim
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-issuers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-issuers
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-controller-orders
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-orders
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook:subjectaccessreviews
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-webhook:subjectaccessreviews
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: cert-manager-webhook
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb:controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metallb:controller
subjects:
- kind: ServiceAccount
  name: metallb-controller
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb:speaker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metallb:speaker
subjects:
- kind: ServiceAccount
  name: metallb-speaker
  namespace: htpc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-default
subjects:
- kind: ServiceAccount
  name: traefik
  namespace: htpc
---
apiVersion: v1
data:
  excludel2.yaml: |
    announcedInterfacesToExclude:
    - ^docker.*
    - ^cbr.*
    - ^dummy.*
    - ^virbr.*
    - ^lxcbr.*
    - ^veth.*
    - ^lo$
    - ^cali.*
    - ^tunl.*
    - ^flannel.*
    - ^kube-ipvs.*
    - ^cni.*
    - ^nodelocaldns.*
kind: ConfigMap
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-excludel2
  namespace: htpc
---
apiVersion: v1
data:
  daemons: |
    # This file tells the frr package which daemons to start.
    #
    # Sample configurations for these daemons can be found in
    # /usr/share/doc/frr/examples/.
    #
    # ATTENTION:
    #
    # When activating a daemon for the first time, a config file, even if it is
    # empty, has to be present *and* be owned by the user and group "frr", else
    # the daemon will not be started by /etc/init.d/frr. The permissions should
    # be u=rw,g=r,o=.
    # When using "vtysh" such a config file is also needed. It should be owned by
    # group "frrvty" and set to ug=rw,o= though. Check /etc/pam.d/frr, too.
    #
    # The watchfrr and zebra daemons are always started.
    #
    bgpd=yes
    ospfd=no
    ospf6d=no
    ripd=no
    ripngd=no
    isisd=no
    pimd=no
    ldpd=no
    nhrpd=no
    eigrpd=no
    babeld=no
    sharpd=no
    pbrd=no
    bfdd=yes
    fabricd=no
    vrrpd=no

    #
    # If this option is set the /etc/init.d/frr script automatically loads
    # the config via "vtysh -b" when the servers are started.
    # Check /etc/pam.d/frr if you intend to use "vtysh"!
    #
    vtysh_enable=yes
    zebra_options="  -A 127.0.0.1 -s 90000000"
    bgpd_options="   -A 127.0.0.1 -p 0"
    ospfd_options="  -A 127.0.0.1"
    ospf6d_options=" -A ::1"
    ripd_options="   -A 127.0.0.1"
    ripngd_options=" -A ::1"
    isisd_options="  -A 127.0.0.1"
    pimd_options="   -A 127.0.0.1"
    ldpd_options="   -A 127.0.0.1"
    nhrpd_options="  -A 127.0.0.1"
    eigrpd_options=" -A 127.0.0.1"
    babeld_options=" -A 127.0.0.1"
    sharpd_options=" -A 127.0.0.1"
    pbrd_options="   -A 127.0.0.1"
    staticd_options="-A 127.0.0.1"
    bfdd_options="   -A 127.0.0.1"
    fabricd_options="-A 127.0.0.1"
    vrrpd_options="  -A 127.0.0.1"

    # configuration profile
    #
    #frr_profile="traditional"
    #frr_profile="datacenter"

    #
    # This is the maximum number of FD's that will be available.
    # Upon startup this is read by the control files and ulimit
    # is called. Uncomment and use a reasonable value for your
    # setup if you are expecting a large number of peers in
    # say BGP.
    #MAX_FDS=1024

    # The list of daemons to watch is automatically generated by the init script.
    #watchfrr_options=""

    # for debugging purposes, you can specify a "wrap" command to start instead
    # of starting the daemon directly, e.g. to use valgrind on ospfd:
    #   ospfd_wrap="/usr/bin/valgrind"
    # or you can use "all_wrap" for all daemons, e.g. to use perf record:
    #   all_wrap="/usr/bin/perf record --call-graph -"
    # the normal daemon command is added to this at the end.
  frr.conf: |
    ! This file gets overriden the first time the speaker renders a config.
    ! So anything configured here is only temporary.
    frr version 7.5.1
    frr defaults traditional
    hostname Router
    line vty
    log file /etc/frr/frr.log informational
  vtysh.conf: |
    service integrated-vtysh-config
kind: ConfigMap
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: speaker
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-frr-startup
  namespace: htpc
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: htpc
  name: cloudflare-token-secret
  namespace: htpc
stringData:
  cloudflare-token: Jgtsea8HguKNZgjgr-P8CGcr9cyo_s1n_2QGH7MC
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-webhook-cert
  namespace: htpc
---
apiVersion: v1
data:
  users: dGVjaG5vOiRhcHIxJDJEby93MXV1JHplNTdCU1V4VHJYNGFwYnVqWXdxRjAKCg==
kind: Secret
metadata:
  labels:
    app: htpc
  name: traefik-dashboard-auth
  namespace: htpc
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: bazarr
  namespace: htpc
spec:
  ports:
  - name: webui
    port: 6767
    protocol: TCP
    targetPort: 6767
  selector:
    app: htpc
    run: bazarr
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager
  namespace: htpc
spec:
  ports:
  - name: tcp-prometheus-servicemonitor
    port: 9402
    protocol: TCP
    targetPort: 9402
  selector:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/name: cert-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook
  namespace: htpc
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/name: webhook
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: jackett
  namespace: htpc
spec:
  ports:
  - name: webui
    port: 9117
    protocol: TCP
    targetPort: 9117
  selector:
    app: htpc
    run: jackett
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: jellyfin
  namespace: htpc
spec:
  ports:
  - name: webui
    port: 8096
    protocol: TCP
    targetPort: 8096
  selector:
    app: htpc
    run: jellyfin
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-webhook-service
  namespace: htpc
spec:
  ports:
  - port: 443
    targetPort: 9443
  selector:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/name: metallb
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: radarr
  namespace: htpc
spec:
  ports:
  - name: webui
    port: 7878
    protocol: TCP
    targetPort: 7878
  selector:
    app: htpc
    run: radarr
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: sonarr
  namespace: htpc
spec:
  ports:
  - name: webui
    port: 8989
    protocol: TCP
    targetPort: 8989
  selector:
    app: htpc
    run: sonarr
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik
  namespace: htpc
spec:
  loadBalancerIP: 192.168.1.245
  ports:
  - name: web
    port: 80
    protocol: TCP
    targetPort: web
  - name: websecure
    port: 443
    protocol: TCP
    targetPort: websecure
  selector:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/name: traefik
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: htpc
  name: transmission
  namespace: htpc
spec:
  ports:
  - name: web
    port: 9091
    targetPort: 9091
  - name: tcp
    port: 51413
    targetPort: 51413
  - name: udp
    port: 51413
    protocol: UDP
    targetPort: 51413
  selector:
    app: htpc
    run: transmission
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: bazarr
  name: bazarr
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      run: bazarr
  template:
    metadata:
      labels:
        app: htpc
        run: bazarr
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        image: linuxserver/bazarr:latest
        imagePullPolicy: IfNotPresent
        name: bazarr
        ports:
        - containerPort: 6767
          name: webui
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: bazarr
        - mountPath: /movies
          name: htpc-home
          subPath: media/movies
        - mountPath: /tv
          name: htpc-home
          subPath: media/tv
      initContainers:
      - command:
        - sh
        - -c
        - until wget -qO- sonarr:8989/sonarr &> /dev/null && wget -qO- radarr:7878/radarr
          &> /dev/null; do echo waiting for sonarr and radarr; sleep 2; done;
        image: busybox
        imagePullPolicy: IfNotPresent
        name: wait-for-sonarr-and-radarr
      - command:
        - sh
        - -c
        - |
          mkdir -p /htpc/bazarr/config
          export RADARR_API_KEY=$(cat /htpc/radarr/config.xml | sed -ne "/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}")
          export SONARR_API_KEY=$(cat /htpc/sonarr/config.xml | sed -ne "/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}")
          cat << EOF > /htpc/bazarr/config/config.ini
          [sonarr]
          apikey = ${SONARR_API_KEY}
          full_update = Daily
          ip = sonarr
          only_monitored = False
          base_url = /sonarr
          ssl = False
          port = 8989

          [radarr]
          apikey = ${RADARR_API_KEY}
          full_update = Daily
          ip = radarr
          only_monitored = False
          base_url = /radarr
          ssl = False
          port = 7878

          [general]
          movie_default_hi = False
          movie_default_language = []
          ip = 0.0.0.0
          use_scenename = True
          use_postprocessing = False
          enabled_providers = subscene,tvsubtitles
          auto_update = True
          port = 6767
          use_radarr = True
          base_url = /bazarr/
          page_size = 25
          minimum_score_movie = 70
          branch = master
          single_language = False
          use_sonarr = True
          serie_default_hi = False
          path_mappings_movie = [['/movies', '/movies'], ['', ''], ['', ''], ['', ''], ['', '']]
          serie_default_enabled = False
          movie_default_enabled = False
          serie_default_language = []
          path_mappings = [['/tv', '/tv'], ['', ''], ['', ''], ['', ''], ['', '']]
          postprocessing_cmd =
          minimum_score = 90
          debug = False
          use_embedded_subs = True
          adaptive_searching = False
          EOF
        image: busybox
        imagePullPolicy: IfNotPresent
        name: config
        volumeMounts:
        - mountPath: /htpc
          name: htpc-home
      securityContext:
        fsGroup: 1000
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9402"
        prometheus.io/scrape: "true"
      labels:
        app: htpc
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/version: v1.14.5
        helm.sh/chart: cert-manager-v1.14.5
    spec:
      containers:
      - args:
        - --v=2
        - --cluster-resource-namespace=$(POD_NAMESPACE)
        - --leader-election-namespace=kube-system
        - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
        - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53
        - --dns01-recursive-nameservers-only
        - --max-concurrent-challenges=60
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/jetstack/cert-manager-controller:v1.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /livez
            port: http-healthz
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        name: cert-manager-controller
        ports:
        - containerPort: 9402
          name: http-metrics
          protocol: TCP
        - containerPort: 9403
          name: http-healthz
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      dnsConfig:
        nameservers:
        - 1.1.1.1
        - 9.9.9.9
      dnsPolicy: None
      enableServiceLinks: false
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cert-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: cainjector
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-cainjector
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
  template:
    metadata:
      labels:
        app: htpc
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cainjector
        app.kubernetes.io/version: v1.14.5
        helm.sh/chart: cert-manager-v1.14.5
    spec:
      containers:
      - args:
        - --v=2
        - --leader-election-namespace=kube-system
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
        imagePullPolicy: IfNotPresent
        name: cert-manager-cainjector
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      enableServiceLinks: false
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cert-manager-cainjector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
  template:
    metadata:
      labels:
        app: htpc
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: webhook
        app.kubernetes.io/version: v1.14.5
        helm.sh/chart: cert-manager-v1.14.5
    spec:
      containers:
      - args:
        - --v=2
        - --secure-port=10250
        - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
        - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
        - --dynamic-serving-dns-names=cert-manager-webhook
        - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
        - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/jetstack/cert-manager-webhook:v1.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: 6080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: cert-manager-webhook
        ports:
        - containerPort: 10250
          name: https
          protocol: TCP
        - containerPort: 6080
          name: healthcheck
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 6080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      enableServiceLinks: false
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cert-manager-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: jackett
  name: jackett
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      run: jackett
  template:
    metadata:
      labels:
        app: htpc
        run: jackett
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        image: linuxserver/jackett:latest
        imagePullPolicy: IfNotPresent
        name: jackett
        ports:
        - containerPort: 9117
          name: webui
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: jackett
        - mountPath: /downloads
          name: htpc-home
          subPath: downloads
      initContainers:
      - args:
        - 'echo start; [[ ! -f /config/Jackett/ServerConfig.json ]] && mkdir -p /config/Jackett/
          &&  echo ''{ "BasePathOverride": "/jackett"}'' > /config/Jackett/ServerConfig.json;
          echo end;'
        command:
        - sh
        - -c
        image: busybox
        imagePullPolicy: IfNotPresent
        name: config
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: jackett
      securityContext:
        fsGroup: 1000
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: jellyfin
  name: jellyfin
  namespace: htpc
spec:
  selector:
    matchLabels:
      app: htpc
      run: jellyfin
  template:
    metadata:
      labels:
        app: htpc
        run: jellyfin
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        image: linuxserver/jellyfin:latest
        imagePullPolicy: IfNotPresent
        name: jellyfin
        ports:
        - containerPort: 8096
          protocol: TCP
        - containerPort: 7359
          protocol: UDP
        - containerPort: 1900
          protocol: UDP
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: jellyfin
        - mountPath: /tv
          name: htpc-home
          readOnly: true
          subPath: media/tv
        - mountPath: /movies
          name: htpc-home
          readOnly: true
          subPath: media/movies
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-controller
  namespace: htpc
spec:
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: metallb
      app.kubernetes.io/name: metallb
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: htpc
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: metallb
        app.kubernetes.io/name: metallb
    spec:
      containers:
      - args:
        - --port=7472
        - --log-level=info
        - --tls-min-version=VersionTLS12
        env:
        - name: METALLB_ML_SECRET_NAME
          value: metallb-memberlist
        - name: METALLB_DEPLOYMENT
          value: metallb-controller
        - name: METALLB_BGP_TYPE
          value: frr
        image: quay.io/metallb/controller:v0.14.5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 7472
          name: monitoring
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: metallb-controller
      terminationGracePeriodSeconds: 0
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: metallb-webhook-cert
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: radarr
  name: radarr
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      run: radarr
  template:
    metadata:
      labels:
        app: htpc
        run: radarr
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        image: linuxserver/radarr:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl "http://localhost:7878/radarr/api/health?ApiKey=$(sed -ne '/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}'
              </config/config.xml)"
          initialDelaySeconds: 30
          periodSeconds: 10
        name: radarr
        ports:
        - containerPort: 7878
          name: webui
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl "http://localhost:7878/radarr/api/system/status?ApiKey=$(sed -ne
              '/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}' </config/config.xml)"
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: radarr
        - mountPath: /movies
          name: htpc-home
          subPath: media/movies
        - mountPath: /downloads
          name: htpc-home
          subPath: downloads
      initContainers:
      - command:
        - sh
        - -c
        - chown -R 1000:1000 /config && chown -R 1000:1000 /movies
        image: busybox
        imagePullPolicy: IfNotPresent
        name: chown
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: radarr
        - mountPath: /movies
          name: htpc-home
          subPath: media/movies
      - args:
        - echo start;[[ ! -f /config/config.xml ]] && echo '<Config><UrlBase>/radarr</UrlBase></Config>'>
          /config/config.xml;echo end;
        command:
        - sh
        - -c
        image: busybox
        imagePullPolicy: IfNotPresent
        name: config
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: radarr
      securityContext:
        fsGroup: 1000
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: sonarr
  name: sonarr
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      run: sonarr
  template:
    metadata:
      labels:
        app: htpc
        run: sonarr
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        image: linuxserver/sonarr:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl "http://localhost:8989/sonarr/api/health?ApiKey=$(sed -ne '/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}'
              </config/config.xml)"
          initialDelaySeconds: 30
          periodSeconds: 10
        name: sonarr
        ports:
        - containerPort: 8989
          name: webui
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl "http://localhost:8989/sonarr/api/system/status?ApiKey=$(sed -ne
              '/ApiKey/{s/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p;q;}' </config/config.xml)"
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: sonarr
        - mountPath: /tv
          name: htpc-home
          subPath: media/tv
        - mountPath: /downloads
          name: htpc-home
          subPath: downloads
      initContainers:
      - command:
        - sh
        - -c
        - chown -R 1000:1000 /config && chown -R 1000:1000 /tv
        image: busybox
        imagePullPolicy: IfNotPresent
        name: chown
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: sonarr
        - mountPath: /tv
          name: htpc-home
          subPath: media/tv
      - args:
        - echo start;[[ ! -f /config/config.xml ]] && echo '<Config><UrlBase>/sonarr</UrlBase></Config>'>
          /config/config.xml;echo end;
        command:
        - sh
        - -c
        image: busybox
        imagePullPolicy: IfNotPresent
        name: config
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: sonarr
      securityContext:
        fsGroup: 1000
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik
  namespace: htpc
spec:
  minReadySeconds: 0
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/instance: traefik-default
      app.kubernetes.io/name: traefik
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: htpc
        app.kubernetes.io/instance: traefik-default
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: traefik
        helm.sh/chart: traefik-28.0.0
    spec:
      containers:
      - args:
        - --global.sendanonymoususage=false
        - --global.checknewversion=false
        - --entryPoints.metrics.address=:9100/tcp
        - --entryPoints.traefik.address=:9000/tcp
        - --entryPoints.web.address=:8000/tcp
        - --entryPoints.websecure.address=:8443/tcp
        - --api.dashboard=true
        - --ping=true
        - --metrics.prometheus=true
        - --metrics.prometheus.entrypoint=metrics
        - --providers.kubernetescrd
        - --providers.kubernetescrd.ingressClass=traefik-external
        - --providers.kubernetescrd.allowExternalNameServices=true
        - --providers.kubernetesingress
        - --providers.kubernetesingress.allowExternalNameServices=true
        - --entryPoints.web.http.redirections.entryPoint.to=:443
        - --entryPoints.web.http.redirections.entryPoint.scheme=https
        - --entryPoints.web.http.redirections.entryPoint.priority=10
        - --entryPoints.websecure.http.tls=true
        - --log.level=INFO
        - --serversTransport.insecureSkipVerify=true
        - --log.level=INFO
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/traefik:v3.0.0
        imagePullPolicy: IfNotPresent
        lifecycle: null
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        name: traefik
        ports:
        - containerPort: 9100
          name: metrics
          protocol: TCP
        - containerPort: 9000
          name: traefik
          protocol: TCP
        - containerPort: 8000
          name: web
          protocol: TCP
        - containerPort: 8443
          name: websecure
          protocol: TCP
        readinessProbe:
          failureThreshold: 1
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /tmp
          name: tmp
      hostNetwork: false
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 60
      volumes:
      - emptyDir: {}
        name: data
      - emptyDir: {}
        name: tmp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: htpc
    run: transmission
  name: transmission
  namespace: htpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: htpc
      run: transmission
  template:
    metadata:
      labels:
        app: htpc
        run: transmission
    spec:
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: WHITELIST
          value: ""
        - name: HOST_WHITELIST
          value: ""
        image: linuxserver/transmission:latest
        imagePullPolicy: IfNotPresent
        name: transmission
        ports:
        - containerPort: 9091
          name: webui
          protocol: TCP
        - containerPort: 51413
          name: torrent-tcp
          protocol: TCP
        - containerPort: 51413
          name: torrent-udp
          protocol: UDP
        resources: {}
        volumeMounts:
        - mountPath: /config
          name: htpc-home
          subPath: transmission
        - mountPath: /downloads
          name: htpc-home
          subPath: downloads
        - mountPath: /watch
          name: htpc-home
          subPath: watch
      securityContext:
        fsGroup: 1000
      volumes:
      - hostPath:
          path: /opt/htpc
          type: DirectoryOrCreate
        name: htpc-home
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: htpc
    app.kubernetes.io/component: speaker
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-speaker
  namespace: htpc
spec:
  selector:
    matchLabels:
      app: htpc
      app.kubernetes.io/component: speaker
      app.kubernetes.io/instance: metallb
      app.kubernetes.io/name: metallb
  template:
    metadata:
      labels:
        app: htpc
        app.kubernetes.io/component: speaker
        app.kubernetes.io/instance: metallb
        app.kubernetes.io/name: metallb
    spec:
      containers:
      - args:
        - --port=7472
        - --log-level=info
        env:
        - name: METALLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: METALLB_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: METALLB_ML_BIND_ADDR
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: METALLB_ML_LABELS
          value: app.kubernetes.io/name=metallb,app.kubernetes.io/component=speaker
        - name: METALLB_ML_BIND_PORT
          value: "7946"
        - name: METALLB_ML_SECRET_KEY_PATH
          value: /etc/ml_secret_key
        - name: FRR_CONFIG_FILE
          value: /etc/frr_reloader/frr.conf
        - name: FRR_RELOADER_PID_FILE
          value: /etc/frr_reloader/reloader.pid
        - name: METALLB_BGP_TYPE
          value: frr
        image: quay.io/metallb/speaker:v0.14.5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: speaker
        ports:
        - containerPort: 7472
          name: monitoring
        - containerPort: 7946
          name: memberlist-tcp
          protocol: TCP
        - containerPort: 7946
          name: memberlist-udp
          protocol: UDP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_RAW
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /etc/ml_secret_key
          name: memberlist
        - mountPath: /etc/frr_reloader
          name: reloader
        - mountPath: /etc/metallb
          name: metallb-excludel2
      - command:
        - /bin/sh
        - -c
        - |
          /sbin/tini -- /usr/lib/frr/docker-start &
          attempts=0
          until [[ -f /etc/frr/frr.log || $attempts -eq 60 ]]; do
            sleep 1
            attempts=$(( $attempts + 1 ))
          done
          tail -f /etc/frr/frr.log
        env:
        - name: TINI_SUBREAPER
          value: "true"
        image: quay.io/frrouting/frr:9.0.2
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: livez
            port: 7473
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: frr
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            - SYS_ADMIN
            - NET_BIND_SERVICE
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /livez
            port: 7473
          periodSeconds: 5
        volumeMounts:
        - mountPath: /var/run/frr
          name: frr-sockets
        - mountPath: /etc/frr
          name: frr-conf
      - command:
        - /etc/frr_reloader/frr-reloader.sh
        image: quay.io/frrouting/frr:9.0.2
        name: reloader
        volumeMounts:
        - mountPath: /var/run/frr
          name: frr-sockets
        - mountPath: /etc/frr
          name: frr-conf
        - mountPath: /etc/frr_reloader
          name: reloader
      - args:
        - --metrics-port=7473
        command:
        - /etc/frr_metrics/frr-metrics
        image: quay.io/frrouting/frr:9.0.2
        name: frr-metrics
        ports:
        - containerPort: 7473
          name: monitoring
        volumeMounts:
        - mountPath: /var/run/frr
          name: frr-sockets
        - mountPath: /etc/frr
          name: frr-conf
        - mountPath: /etc/frr_metrics
          name: metrics
      hostNetwork: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - cp -rLf /tmp/frr/* /etc/frr/
        image: quay.io/frrouting/frr:9.0.2
        name: cp-frr-files
        securityContext:
          runAsGroup: 101
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp/frr
          name: frr-startup
        - mountPath: /etc/frr
          name: frr-conf
      - command:
        - /bin/sh
        - -c
        - cp -f /frr-reloader.sh /etc/frr_reloader/
        image: quay.io/metallb/speaker:v0.14.5
        name: cp-reloader
        volumeMounts:
        - mountPath: /etc/frr_reloader
          name: reloader
      - command:
        - /bin/sh
        - -c
        - cp -f /frr-metrics /etc/frr_metrics/
        image: quay.io/metallb/speaker:v0.14.5
        name: cp-metrics
        volumeMounts:
        - mountPath: /etc/frr_metrics
          name: metrics
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: metallb-speaker
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 0
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      volumes:
      - name: memberlist
        secret:
          defaultMode: 420
          secretName: metallb-memberlist
      - configMap:
          defaultMode: 256
          name: metallb-excludel2
        name: metallb-excludel2
      - emptyDir: {}
        name: frr-sockets
      - configMap:
          name: metallb-frr-startup
        name: frr-startup
      - emptyDir: {}
        name: frr-conf
      - emptyDir: {}
        name: reloader
      - emptyDir: {}
        name: metrics
  updateStrategy:
    type: RollingUpdate
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "1"
  labels:
    app: htpc
    app.kubernetes.io/component: startupapicheck
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-startupapicheck
  namespace: htpc
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: htpc
        app.kubernetes.io/component: startupapicheck
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: startupapicheck
        app.kubernetes.io/version: v1.14.5
        helm.sh/chart: cert-manager-v1.14.5
    spec:
      containers:
      - args:
        - check
        - api
        - --wait=1m
        - -v
        image: quay.io/jetstack/cert-manager-startupapicheck:v1.14.5
        imagePullPolicy: IfNotPresent
        name: cert-manager-startupapicheck
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      enableServiceLinks: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cert-manager-startupapicheck
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app: htpc
  name: local-example-com
  namespace: htpc
spec:
  commonName: '*.external.my-homelab.party'
  dnsNames:
  - external.my-homelab.party
  - '*.external.my-homelab.party'
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-staging
  secretName: local-example-com-staging-tls
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  labels:
    app: htpc
  name: letsencrypt-staging
  namespace: htpc
spec:
  acme:
    email: chaitanya2692@gmail.com
    privateKeySecretRef:
      name: letsencrypt-staging
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    solvers:
    - dns01:
        cloudflare:
          apiTokenSecretRef:
            key: cloudflare-token
            name: cloudflare-token-secret
          email: chaitanya2692@gmail.com
      selector:
        dnsZones:
        - my-homelab.party
---
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  labels:
    app: htpc
  name: first-pool
  namespace: htpc
spec:
  addresses:
  - 192.168.1.240/28
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  labels:
    app: htpc
  name: empty
  namespace: htpc
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  labels:
    app: htpc
    app.kubernetes.io/instance: traefik-default
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-28.0.0
  name: traefik
spec:
  controller: traefik.io/ingress-controller
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    app: htpc
  name: htpc
  namespace: htpc
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`)
    middlewares:
    - name: traefik-dashboard-basicauth
      namespace: htpc
    services:
    - kind: TraefikService
      name: api@internal
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: jellyfin
      namespace: htpc
      port: 8096
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/jackett`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: jackett
      namespace: htpc
      port: 9117
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/sonarr`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: sonarr
      namespace: htpc
      port: 8989
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/radarr`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: radarr
      namespace: htpc
      port: 7878
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/bazarr`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: bazarr
      namespace: htpc
      port: 6767
  - kind: Rule
    match: Host(`traefik.external.my-homelab.party`) && PathPrefix(`/transmission`)
    middlewares: []
    priority: 0
    services:
    - kind: Service
      name: transmission
      namespace: htpc
      port: 9091
  tls:
    secretName: local-example-com-staging-tls
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  labels:
    app: htpc
  name: default-headers
  namespace: htpc
spec:
  headers:
    browserXssFilter: true
    contentTypeNosniff: true
    customFrameOptionsValue: SAMEORIGIN
    customRequestHeaders:
      X-Forwarded-Proto: https
    forceSTSHeader: true
    stsIncludeSubdomains: true
    stsPreload: true
    stsSeconds: 15552000
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  labels:
    app: htpc
  name: traefik-dashboard-basicauth
  namespace: htpc
spec:
  basicAuth:
    secret: traefik-dashboard-auth
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from-secret: htpc/cert-manager-webhook-ca
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: cert-manager-webhook
      namespace: htpc
      path: /mutate
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: webhook.cert-manager.io
  rules:
  - apiGroups:
    - cert-manager.io
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - certificaterequests
  sideEffects: None
  timeoutSeconds: 30
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from-secret: htpc/cert-manager-webhook-ca
  labels:
    app: htpc
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    app.kubernetes.io/version: v1.14.5
    helm.sh/chart: cert-manager-v1.14.5
  name: cert-manager-webhook
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: cert-manager-webhook
      namespace: htpc
      path: /validate
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: webhook.cert-manager.io
  namespaceSelector:
    matchExpressions:
    - key: cert-manager.io/disable-validation
      operator: NotIn
      values:
      - "true"
  rules:
  - apiGroups:
    - cert-manager.io
    - acme.cert-manager.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - '*/*'
  sideEffects: None
  timeoutSeconds: 30
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app: htpc
    app.kubernetes.io/instance: metallb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: metallb
    app.kubernetes.io/version: v0.14.5
    helm.sh/chart: metallb-0.14.5
  name: metallb-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta2-bgppeer
  failurePolicy: Fail
  name: bgppeervalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta2
    operations:
    - CREATE
    - UPDATE
    resources:
    - bgppeers
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta1-ipaddresspool
  failurePolicy: Fail
  name: ipaddresspoolvalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ipaddresspools
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta1-bgpadvertisement
  failurePolicy: Fail
  name: bgpadvertisementvalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - bgpadvertisements
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta1-community
  failurePolicy: Fail
  name: communityvalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - communities
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta1-bfdprofile
  failurePolicy: Fail
  name: bfdprofilevalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - DELETE
    resources:
    - bfdprofiles
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: metallb-webhook-service
      namespace: htpc
      path: /validate-metallb-io-v1beta1-l2advertisement
  failurePolicy: Fail
  name: l2advertisementvalidationwebhook.metallb.io
  rules:
  - apiGroups:
    - metallb.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - l2advertisements
  sideEffects: None
