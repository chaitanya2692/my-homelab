apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: recipes-postgresql
  labels:
    app: recipes
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: recipes
      tier: database
  serviceName: recipes-postgresql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # You might want to adjust Velero backup annotations if needed
        # backup.velero.io/backup-volumes: data # 'data' volume name changes below
      labels:
        app: recipes
        tier: database
      # name: recipes-postgresql # Name is inherited
    spec:
      # Use fsGroup matching runAsUser of the main container
      securityContext:
        fsGroup: 1001 # Matches the Bitnami postgres user ID
      serviceAccountName: recipes # Changed from tandoor to recipes
      initContainers:
        # This init container ensures the directory exists and has correct permissions
        # before the main postgres container starts.
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:stretch # As per original
          imagePullPolicy: IfNotPresent # Changed from Always for less pulling
          command:
            - sh
            - -c
            - |
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              # Ensure the parent directory and the data dir are owned by postgres user/group
              chown -R 1001:1001 /bitnami/postgresql
          securityContext:
            runAsUser: 0 # Needs root to chown
          resources: # Kept original requests
            requests:
              cpu: 100m # Reduced from 250m
              memory: 128Mi # Reduced from 256Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: tandoor-pg-data # Use the volume name defined below
      containers:
        - name: tandoor-db # Renamed container
          image: docker.io/bitnami/postgresql
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001 # Run as postgres user
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR # Mounted path
              value: /bitnami/postgresql
            - name: PGDATA # Data directory within the volume mount
              value: /bitnami/postgresql/data
            # DB User for Tandoor Application (created by Bitnami entrypoint)
            - name: POSTGRES_USER
              value: recipes # Keep as 'recipes' unless Tandoor app config changes
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tandoor-credentials
                  key: postgresql-password
            # DB Admin User (postgres) Password
            - name: POSTGRESQL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tandoor-credentials # Updated secret name
                  key: postgresql-postgres-password # Key for the postgres admin password
            # Database Name for Tandoor Application
            - name: POSTGRES_DB
              value: recipes # Keep as 'recipes' unless Tandoor app config changes
          ports:
            - containerPort: 5432
              name: postgresql
              protocol: TCP
          livenessProbe:
            exec:
              command:
                # Check readiness using the 'postgres' admin user and the 'recipes' db
                - sh
                - -c
                - exec pg_isready -U "postgres" -d "recipes" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                # Check readiness using the 'postgres' admin user and the 'recipes' db
                - sh
                - -c
                - -e # Exit immediately if a command exits with a non-zero status.
                - |
                  pg_isready -U "postgres" -d "recipes" -h 127.0.0.1 -p 5432
                  # Bitnami specific check - presence of .initialized file
                  # [ -f /opt/bitnami/postgresql/tmp/.initialized ] # Path might differ, PGDATA is safer
                  [ -f /bitnami/postgresql/data/postmaster.pid ] # Check if postmaster is running
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources: # Kept original requests
            requests:
              cpu: 250m
              memory: 256Mi
            # limits: # Consider adding limits
            #   cpu: 500m
            #   memory: 512Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql # Mount point inside container
              name: tandoor-pg-data # Use the volume name defined below
      volumes:
        # Define the volume using the existing utils-pvc
        - name: tandoor-pg-data
          persistentVolumeClaim:
            claimName: utils-pvc # Your existing PVC
      # Removed volumeClaimTemplates as we use an existing PVC
  # volumeClaimTemplates: ... (removed)
